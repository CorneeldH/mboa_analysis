---
title: "Samenvoegen"
---

```{r}
#| include: false
#| freeze: false
#| cache: false
source("utils/manage_packages.R")



```

Hier voegen we alle data samen in enkele bestanden.

De left_join_load() zorgt ervoor dat de aanvullende data niet in het geheugen wordt bewaard, maar steeds binnen de functie wordt toegevoegd en daarna wordt vergeten. Ook zoekt deze de data standaard in de in de config aangegeven data_prepared_dir.

Door steeds het oorspronkelijke data-bestand als uitgangspunt te nemen (left-join) en de relatie (relationship) te specificeren met (..-one) verzekeren we ons ervan dat er geen rijen worden toegevoegd.

## Verbintenissen

Hier voegen we al ingeladen en geprepareerde dat op gebied van verbintenissen samen. Zo gaan we van 19 variabelen naar 86 variabelen.

### Basis

Eerst voegen we alle aanvullende data toe die al op verbintenis niveau is.

```{r}

full_filename <- file.path(config::get("data_prepared_dir"), "enrollments_basics.rds")

enrollments_basics <- readRDS(full_filename)

enrollments_basic_joins <- enrollments_basics |>
    left_join_load("enrollments_level",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_flex",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_special_needs",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    # TODO For now not used since data is incomplete
    # left_join_load(enrollments_ibp,
    #           by = join_by(VERBINTENIS_ID),
    #           relationship = "many-to-one") |>
    left_join_load("enrollments_application",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_bpv",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one")

save_combined(enrollments_basic_joins)
rm(enrollments_basics)

print("Succesvol basis data samengevoegd")

```

### Dimensies

Vervolgens voegen we data toe uit diverse dimensies (mapping tables). Zoals team, locatie en opleiding.

```{r}

enrollments_extra_id_joins <- enrollments_basic_joins |>
    left_join_load("teams", 
              by = join_by(TEAM_ID), 
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("locations",
              by = join_by(LOCATIE_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("reasons_for_leaving",
              by = join_by(REDEN_UITSCHRIJVING_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("programmes_basics",
              by = join_by(OPLEIDING_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("programme_bc_codes", 
              by = join_by(OPLEIDING_code),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir")
    
save_combined(enrollments_extra_id_joins)
rm(enrollments_basic_joins)

print("Succesvol dimensies toegevoegd")

```

### Aanvullende data

Tenslotte voegen we aanvullende data die niet op verbintenis niveau is, zoals examen plannen, vooropleiding en gemiddelde aanwezigheid per jaar.

```{r}

enrollments_combined  <- enrollments_extra_id_joins |>
    left_join_load("programmes_exam_plan",
              by = join_by(OPLEIDING_ID, COHORT_ID),
              relationship = "many-to-one") |>
    # TODO Check cohorts and exam plans and fix order
    left_join_load("cohorts",
              by = join_by(COHORT_ID),
              relationship = "many-to-one") |>
    left_join_load("student_years_prior_education",
              by = join_by(DEELNEMER_ID, COHORT_naam),
              relationship = "many-to-one") |>
    left_join_load("student_years_demographics",
          by = join_by(DEELNEMER_ID, COHORT_naam),
          relationship = "many-to-one") |>
    left_join_load("enrollment_years_attendance",
              by = c("VERBINTENIS_ID", "COHORT_naam" = "SCHOOLJAAR_naam"),
              relationship = "one-to-one")

save_combined(enrollments_combined)
glimpse(enrollments_combined)
rm(enrollments_extra_id_joins)

```

### Verrijken

Nu alles is gekoppeld kunnen we data verrijken met afgeleide variabelen.

```{r}

enrollments_combined_enriched <- enrollments_combined |>
    calculate_exam_plan_to_start() |>
    calculate_exam_plan_to_specific_dates() |>
    calculate_application_to_start() |>
    calculate_bpv_status_to_start() |>
    calculate_bpv_status_to_specific_dates()

save_combined(enrollments_combined_enriched)

```

## Medewerkers

Naast de studenten en verbintenissen, kijken we ook naar medewerkers. Hier voegen we contracten, verzuim en functies samen.

```{r}

full_filename <- file.path(config::get("data_prepared_dir"), "employees_contract.rds")

employees_contract <- readRDS(full_filename)

employees_combined <- employees_contract |>
    left_join_load("employees_contract_extra_fte",
              by = join_by(MEDEWERKER_ID, 
                           MEDEWERKER_contract_kostenplaats_code, 
                           MEDEWERKER_contract_fte_peildatum),
              relationship = "one-to-one") |>
    left_join_load("employees_job_type",
              by = c("MEDEWERKER_ID", 
                           "MEDEWERKER_contract_kostenplaats_code" = "MEDEWERKER_kostenplaats_code", 
                           "MEDEWERKER_contract_fte_peildatum" = "MEDEWERKER_functie_peildatum"),
              relationship = "one-to-one") |>
    # TODO
    add_school_year() |>
    left_join_load("employees_absence",
              by = join_by(MEDEWERKER_ID,
                           SCHOOLJAAR_naam),
              # This can many since there is no kostenplaats in the absence data
              relationship = "many-to-one") 

save_combined(employees_combined)
rm(employees_contract)

```
## Studenttevredenheid


```{r}

students_satisfaction_full_filename <- file.path(config::get("data_prepared_dir"), "students_satisfaction.rds")

students_satisfaction <- readRDS(students_satisfaction_full_filename)





```

### Controle studenttevredenheid

```{r}

test_welzijn <- students_satisfaction |>
    filter(CREBO == 23065) |>
    count(label02, label01)

test <- unique(students_satisfaction$label02)
test2 <- unique(teams_enrollments$TEAM_naam)

intersect(test, test2)

test_opleiding_mapping_team <- enrollments_combined_enriched %>% count(OPLEIDING_code, OPLEIDING_naam, TEAM_naam, TEAM_kostenplaats) %>% mutate(
    OPLEIDING_code_numeriek = parse_number(OPLEIDING_code)
) %>%
    group_by(OPLEIDING_code_numeriek, TEAM_naam, TEAM_kostenplaats) %>% 
    summarise(n = sum(n)) %>%
    ungroup()

test_opleiding_mapping_team_duplicated <- test_opleiding_mapping_team %>% 
    get_dupes(OPLEIDING_code_numeriek)

```

## Medewerkertevredenheid 

```{r}

employees_satisfaction_full_filename <- file.path(
    config::get("data_prepared_dir"), "employees_satisfaction.rds")

employees_satisfaction <- readRDS(employees_satisfaction_full_filename)

teams_employee_satisfaction <- employees_satisfaction |>
    group_by(characteristic_2, schooljaar_numeriek) |>
    summarise(across(contains("score"), ~mean(., na.rm = TRUE)), .groups = "drop")
        


```



## Aggregeren naar teams

Nu we twee data bestanden met verbintenissen en medewerkers hebben, kunnen we deze aggregeren naar onderwijsteams.

### Verbintenissen filteren

Hierbij filteren we verbintenissen op basis van

-   startjaar –\> 2019 t/m 2023, de meest recente, complete jaren

-   maand –\> Augustus. Dit voorkomt afwijkingen in BPV etc.

-   intensiteit –\> Voltijd. Deeltijd studenten doen langer over hun studie

-    niveau –\> Geen entree. De inspectie heeft hierbij geen norm.

```{r}

enrollments_combined_enriched <- readRDS(file.path(config::get("data_combined_dir"), "enrollments_combined_enriched.rds"))

enrollments_combined_enriched_filtered <- enrollments_combined_enriched |>
    filter(COHORT_startjaar >= config::get("first_year") - 1, # Later on we want to calculate growth per year
           COHORT_startjaar <= config::get("last_year"),
           month(VERBINTENIS_begindatum) == 8,
           VERBINTENIS_intensiteit == "Voltijd",
           VERBINTENIS_niveau %in% c("2", "3", "4"))
    

```

### Verbintenis aggregeren



```{r}

teams_enrollments <- enrollments_combined_enriched_filtered |>
    mutate(
        VERBINTENIS_is_passend_onderwijs_gevuld = if_else(
            is.na(VERBINTENIS_passend_onderwijs_kenmerk), FALSE, TRUE), 
        # Als een boolean niet TRUE is, dan is deze FALSE
        across(contains("_is_"), ~if_else(is.na(.), FALSE, .), .names = "{.col}_opgevuld")
    ) %>%
    group_by(TEAM_naam, TEAM_kostenplaats, TEAM_naam_afk, TEAM_school, TEAM_school_afk, COHORT_naam, COHORT_startjaar) %>%
    summarise(
        TEAM_studenten_aantal = n(),
        across(contains("dagen"), ~mean(., na.rm = TRUE)),
        #across(contains("_opgevuld"), ~mean(., na.rm = TRUE)),
        across(contains("waarneming"), ~mean(., na.rm = TRUE)),
        across(contains("_is_"), ~mean(., na.rm = TRUE)),
        BPV_omvang = mean(BPV_omvang, na.rm = TRUE),
        #VERBINTENIS_aanmelding_dagen_in_proces = mean(VERBINTENIS_aanmelding_dagen_in_proces, na.rm = TRUE),
        #VERBINTENIS_is_flex_gevuld = sum(VERBINTENIS_is_flex, na.rm = TRUE),
        #VERBINTENIS_aanmelding_begin_dagen_tot_start = mean(VERBINTENIS_aanmelding_begin_dagen_tot_start, na.rm = TRUE),  
        .groups = "drop"
    ) |>
    # Deze variabele bevat enkel TRUE, de opgevuld variant zet NA op FALSE en levert daardoor wel meerdere waardes
    select(-VERBINTENIS_aanmelding_is_eerste_jaar)
        
save_combined(teams_enrollments)

```

### Medewerkers aggregeren

Vervolgen

```{r}

if (!exists("employees_combined")) {
    employees_combined <- readRDS(file.path(config::get("data_combined_dir"), "employees_combined.rds"))
}

teams_employees <- employees_combined |>
    mutate(
        # TODO moet eerder bij aanmaken verzuim en samenvoegen contracten
        across(contains("verzuim"), ~if_else(is.na(.), 0, .)),
        MEDEWERKER_contract_fte_totaal = MEDEWERKER_contract_fte + MEDEWERKER_contract_fte_aanpassing
    ) |>
    filter(MEDEWERKER_contract_kostenplaats_code %in% teams_enrollments$TEAM_kostenplaats) |>
    group_by(MEDEWERKER_contract_kostenplaats_code, SCHOOLJAAR_naam) |>
    summarise(
        MEDEWERKER_contract_fte = sum(MEDEWERKER_contract_fte, na.rm = TRUE),
        MEDEWERKER_contract_fte_aanpassing = sum(MEDEWERKER_contract_fte_aanpassing, na.rm = TRUE),
        MEDEWERKER_contract_fte_totaal = sum(MEDEWERKER_contract_fte_totaal, na.rm = TRUE),
        across(contains("verzuim"), ~mean(., na.rm = TRUE)),
        .groups = "drop"
    )

save_combined(teams_employees)

```

## Teams

We laden hier het startersresultaat per team per jaar toe. We combineren de verbintenissen, medewerkers en startresultaten, van links naar rechts. Dat wil zeggen dat al medewerkers-teams die waar geen verbintenissen onder vallen worden gefilterd.

```{r}

teams_results_full_filename <- file.path(config::get("data_prepared_dir"), "teams_results_retention_start.rds")

teams_results_retention_start <- readRDS(teams_results_full_filename)

teams_combined <- teams_enrollments |>
    left_join(teams_employees,
              by = c("TEAM_kostenplaats" = "MEDEWERKER_contract_kostenplaats_code", "COHORT_naam" = "SCHOOLJAAR_naam"),
              relationship = "one-to-one") |>
    left_join(teams_results_retention_start,
              by = c("TEAM_naam", "COHORT_naam" = "SCHOOLJAAR_naam"),
              relationship = "one-to-one")

save_combined(teams_combined)

```


```{r}

teams_combined_enriched <- teams_combined |>
    mutate(TEAM_student_staf_ratio = TEAM_studenten_aantal / MEDEWERKER_contract_fte_totaal) |>
    arrange(TEAM_naam, COHORT_startjaar) |>
    group_by(TEAM_naam) |>
    mutate(
        TEAM_studenten_aantal_vorig_jaar = lag(TEAM_studenten_aantal),
        TEAM_student_aantal_groei = TEAM_studenten_aantal - TEAM_studenten_aantal_vorig_jaar,
        TEAM_studenten_aantal_pct_groei = (
            (TEAM_studenten_aantal - TEAM_studenten_aantal_vorig_jaar) / TEAM_studenten_aantal_vorig_jaar
            ) |>
            round(2)
    ) |>
    ungroup() |>
    filter(COHORT_startjaar >= config::get("first_year"))

    

```
