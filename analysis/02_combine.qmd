---
title: "Samenvoegen"
---

{{< include 00_setup.qmd >}}

Hier voegen we alle data samen in enkele bestanden.

De left_join_load() zorgt ervoor dat de aanvullende data niet in het geheugen wordt bewaard, maar steeds binnen de functie wordt toegevoegd en daarna wordt vergeten. Ook zoekt deze de data standaard in de in de config aangegeven data_prepared_dir.

Door steeds het oorspronkelijke data-bestand als uitgangspunt te nemen (left-join) en de relatie (relationship) te specificeren met (..-one) verzekeren we ons ervan dat er geen rijen worden toegevoegd.

## Verbintenissen

Hier voegen we al ingeladen en geprepareerde dat op gebied van verbintenissen samen. Zo gaan we van 19 variabelen naar 86 variabelen.

### Basis

Eerst voegen we alle aanvullende data toe die al op verbintenis niveau is.

```{r}

enrollments_basics_file_path <- file.path(config::get("data_prepared_dir"), "enrollments_basics.rds")

enrollments_basics <- readRDS(enrollments_basics_file_path)

enrollments_basic_joins <- enrollments_basics |>
    left_join_load("enrollments_level",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_flex",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_special_needs",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    # TODO For now not used since data is incomplete
    # left_join_load(enrollments_ibp,
    #           by = join_by(VERBINTENIS_ID),
    #           relationship = "many-to-one") |>
    left_join_load("enrollments_application",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one") |>
    left_join_load("enrollments_bpv",
              by = join_by(VERBINTENIS_ID),
              relationship = "one-to-one")

save_combined(enrollments_basic_joins)
rm(enrollments_basics)

print("Succesvol basis data samengevoegd")

```

### Dimensies

Vervolgens voegen we data toe uit diverse dimensies (mapping tables). Zoals team, locatie en opleiding.

```{r}

if (!exists("enrollments_basic_joins")) {
    enrollments_basic_joins_file_path <- file.path(config::get("data_combined_dir"), "enrollments_basic_joins.rds")
    enrollments_basic_joins <- readRDS(enrollments_basic_joins_file_path)
}

enrollments_extra_id_joins <- enrollments_basic_joins |>
    left_join_load("teams", 
              by = join_by(TEAM_ID), 
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("locations",
              by = join_by(LOCATIE_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("reasons_for_leaving",
              by = join_by(REDEN_UITSCHRIJVING_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("programmes_basics",
              by = join_by(OPLEIDING_ID),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir") |>
    left_join_load("programme_bc_codes", 
              by = join_by(OPLEIDING_code),
              relationship = "many-to-one",
              .config_data_path = "data_ingested_dir")
    
save_combined(enrollments_extra_id_joins)
rm(enrollments_basic_joins)

print("Succesvol dimensies toegevoegd")

```

### Aanvullende data

Tenslotte voegen we aanvullende data die niet op verbintenis niveau is, zoals examen plannen, vooropleiding en gemiddelde aanwezigheid per jaar.

```{r}

if (!exists("enrollments_extra_id_joins")) {
    enrollments_extra_id_joins <- readRDS(file.path(config::get("data_combined_dir"), "enrollments_extra_id_joins.rds"))
}

enrollments_combined  <- enrollments_extra_id_joins |>
    left_join_load("programmes_exam_plan",
              by = join_by(OPLEIDING_ID, COHORT_ID),
              relationship = "many-to-one") |>
    left_join_load("cohorts",
              by = join_by(COHORT_ID),
              relationship = "many-to-one") |>
    left_join_load("student_prior_education_yearly",
              by = join_by(DEELNEMER_ID, COHORT_naam),
              relationship = "many-to-one") |>
    left_join_load("student_demographics_yearly",
          by = join_by(DEELNEMER_ID, COHORT_naam),
          relationship = "many-to-one") |>
    left_join_load("enrollment_years_attendance",
              by = join_by(VERBINTENIS_ID, COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one") |>
    left_join_load("enrollments_years_attendance_weekly",
              by = join_by(VERBINTENIS_ID, COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one")

save_combined(enrollments_combined)
rm(enrollments_extra_id_joins)

print("Succesvol aanvullende data toegevoegd")

```

### Verrijken

Nu alles is gekoppeld kunnen we data verrijken met afgeleide variabelen. Voor examenplannen, aanmeldingen en BPV status bereken we het aantal dagen tot begin van de verbintenis en specifieke peildatums

```{r}

if (!exists("enrollments_combined")) {
    enrollments_combined_file_path <- file.path(config::get("data_combined_dir"), "enrollments_combined.rds")
    enrollments_combined <- readRDS(enrollments_combined_file_path)
}    

enrollments_combined_enriched <- enrollments_combined |>
    calculate_exam_plan_to_start() |>
    calculate_exam_plan_to_specific_dates() |>
    calculate_application_to_start() |>
    calculate_bpv_status_to_start() |>
    calculate_bpv_status_to_specific_dates() |>
    add_filled_booleans() |> 
    add_grouped_enrollment_dates() |>
    calculate_active_on_1_okt() |>
    calculate_proper_placement() |>
    calculate_is_havo_vwo_dropout()

save_combined(enrollments_combined_enriched)

print("Succesvol verrijkt")

```

## Medewerkers

Naast de studenten en verbintenissen, kijken we ook naar medewerkers. Hier voegen we contracten, verzuim en functies samen.

```{r}

employees_contract_file_path <- file.path(config::get("data_prepared_dir"), 
                                          "employees_contract.rds")

employees_contract <- readRDS(employees_contract_file_path)

employees_combined <- employees_contract |>
    left_join_load("employees_contract_extra_fte",
              by = join_by(MEDEWERKER_ID, 
                           TEAM_kostenplaats_code, 
                           MEDEWERKER_contract_fte_peildatum),
              relationship = "one-to-one") |>
    left_join_load("employees_job_type",
              by = join_by(MEDEWERKER_ID, 
                           TEAM_kostenplaats_code, 
                           MEDEWERKER_contract_fte_peildatum == MEDEWERKER_functie_peildatum),
              relationship = "one-to-one") |>
    left_join_load("employees_absence_yearly",
              by = join_by(MEDEWERKER_ID,
                           SCHOOLJAAR_naam),
              # This can be many since there is no 'kostenplaats' in the absence data
              relationship = "many-to-one") 

save_combined(employees_combined)
rm(employees_contract)

```

### Verrijken

Ook de medewerkers kunnen verrijkt worden. Zo berekenen we het totaal aantal FTE per medewerker en zetten we mederwerkers die niet voorkwamen in de absentie exports op geen verzuim.

```{r}

if (!exists("employees_combined")) {
    employees_combined_file_path <- file.path(config::get("data_combined_dir"), 
                                              "employees_combined.rds")
    employees_combined <- readRDS(employees_combined_file_path)
}

employees_combined_enriched <- employees_combined |>
    fix_absences() |>
    create_total_fte()

save_combined(employees_combined_enriched)

```

## Aggregeren naar teams

Nu we twee data bestanden met verbintenissen en medewerkers hebben, kunnen we deze aggregeren naar onderwijsteams.

### Verbintenissen filteren

Hierbij filteren we verbintenissen op basis van

-   startjaar –\> 2019 t/m 2023, de meest recente, complete jaren. We behouden ook 2018 om groei opleiding te berekenen.

-   begindatum –\> Er zaten ook studenten in met verbintenissen die jaren later begonnen dan cohort startdatum. Dit is opgelost, door te filteren op een marge van 2 maanden voor en 10 maanden na de cohort startdatum.

-   intensiteit –\> Voltijd. Deeltijd studenten doen langer over hun studie, dus dit vertroebeld.

-    niveau –\> Geen entree. De inspectie heeft hierbij geen norm en zij zitten dan ook niet in het startersresultaat.

-    peildatum -\> 1 oktober. Dit is de peildatum voor de telling van de studenten.

```{r}

enrollments_combined_enriched <- readRDS(file.path(config::get("data_combined_dir"),
                                                   "enrollments_combined_enriched.rds"))

enrollments_combined_enriched_filtered <- enrollments_combined_enriched |>
    filter_enrollments_for_team_aggregation()
    
save_combined(enrollments_combined_enriched_filtered)

```

### Verbintenis 

We selecteren categorische variabelen die om ze later om te zetten naar kolommen met percentages voor iedere waarde. Om te voorkomen dat we teveel kolommen krijgen met vaak 0, selecteren we alleen de variabelen die maximaal 6 verschillende waardes hebben en groeperen we waardes met minder dan 10% in een "overige" categorie.


```{r}

teams_enrollments_cat_vars <- enrollments_combined_enriched_filtered |>
    transform_enrollments_cat_val_to_pct_columns()


```




```{r}

teams_enrollments_num_vars <- enrollments_combined_enriched_filtered  |>
    summarise_enrollments_num_vars_to_teams() #|>
    # Deze variabele bevat enkel TRUE, de opgevuld variant zet NA op FALSE en levert daardoor wel meerdere waardes
   # select(-AANMELDING_is_eerste_jaar)
        

```

We voegen de naar team niveau geaggregeerde categorische en numerieke enrollments informatie weer samen.

```{r}

teams_enrollments <- teams_enrollments_cat_vars |>
    left_join(teams_enrollments_num_vars, by = c("TEAM_naam", "COHORT_naam"))

save_combined(teams_enrollments)

```

### Medewerkers

We gaan nu naar de medewerkers. Ook hier creëeren we obv de categorische variabelen kolommen met percentages per waarde. 

```{r}

if (!exists("employees_combined_enriched")) {
    employees_combined_enriched_file_path <- file.path(config::get("data_combined_dir"), "employees_combined_enriched.rds")
    employees_combined_enriched <- readRDS(employees_combined_enriched_file_path)
}

if (!exists("enrollments_combined_enriched_filtered")) {
    enrollments_combined_enriched_file_path <- file.path(config::get("data_combined_dir"), "enrollments_combined_enriched_filtered.rds")
    enrollments_combined_enriched_filtered <- readRDS(enrollments_combined_enriched_file_path)
}

teams_employees_cat_vars <- employees_combined_enriched |>
    # Filter employees to limit the number of job types
    filter_employees_to_education_teams_only() |>
    transform_employees_cat_val_to_pct_columns()


```

Vervolgens aggregeren we de numerieke variabelen naar team niveau.

```{r}

teams_employees_num_vars <- employees_combined_enriched |>
    summarise_employees_num_vars_to_teams()


```

Tenslotte voegen we deze samen om zo alle informatie over medewerkers op teamniveau te hebben.

```{r}

teams_employees <- teams_employees_cat_vars |>
    left_join(teams_employees_num_vars, by = c("TEAM_kostenplaats_code", "SCHOOLJAAR_naam"))

save_combined(teams_employees)

```

### Studenttevredenheid

De studenttevredenheid uit de JOB wordt via een mapping gekoppeld aan de teams.

```{r}

students_satisfaction_file_path <- file.path(config::get("data_prepared_dir"), "students_satisfaction.rds")

students_satisfaction <- readRDS(students_satisfaction_file_path)

students_satisfaction_enriched <- students_satisfaction |>
    left_join_load("crebo_to_organisation_mapping",
                   by = join_by(JOB_CREBO == OPLEIDING_crebo_correctie),
                   relationship = "many-to-one"
                   )

save_combined(students_satisfaction_enriched)

print("Succesvol studenttevredenheid gekoppeld aan teams")

```
Vervolgens aggregeren we de studenttevredenheid naar team niveau. We filteren hier ook de entree studenten weg, omdat dit niet wordt meegenomen in het correlatie-onderzoek. Hierbij nemen de weegfactor mee.

```{r}

teams_students_satisfaction <- students_satisfaction_enriched |> 
    filter(JOB_niveau != "entreeopleiding") |>
    mutate(JOB_weegfac1 = as.numeric(JOB_weegfac1)) |>
    group_by(OPLEIDING_team, JOB_SCHOOLJAAR_startjaar) |>
    summarise(
        across(where(is.numeric), 
               ~ sum(. * JOB_weegfac1 /sum(JOB_weegfac1), na.rm = TRUE)), 
        .groups = "drop")

save_combined(teams_students_satisfaction)

print("Succesvol studenttevredenheid geaggregeerd naar teams")

```


### Medewerkertevredenheid 

We aggregeren de medewerkerstevredenheid naar teamniveau.

```{r}

employees_satisfaction_file_path <- file.path(
    config::get("data_prepared_dir"), "employees_satisfaction.rds")

employees_satisfaction <- readRDS(employees_satisfaction_file_path)

teams_employee_satisfaction <- employees_satisfaction |>
    group_by(TEAM_kostenplaats_code, MWO_schooljaar_startjaar) |>
    summarise(
        TEAM_MWO_aantal_ingevuld = n(),
        across(where(is.numeric), ~mean(., na.rm = TRUE)), .groups = "drop") |>
    mutate(across(where(is.numeric), ~if_else(is.nan(.), NA_real_, .)))

save_combined(teams_employee_satisfaction)

```


## Teams

We laden hier het startersresultaat per team per jaar toe. We combineren de verbintenissen, medewerkers en startresultaten, van links naar rechts. Dat wil zeggen dat al medewerkers-teams die waar geen verbintenissen onder vallen worden gefilterd.

```{r}

if (!exists("teams_enrollments")) {
    teams_enrollments_file_path <- file.path(config::get("data_combined_dir"),
                                             "teams_enrollments.rds")
    teams_enrollments <- readRDS(teams_enrollments_file_path)
}

teams_combined <- teams_enrollments |>
    left_join_load("teams_employees",
              by = join_by(TEAM_kostenplaats_code, 
                           COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one",
              .config_data_path = "data_combined_dir") |>
    left_join_load("teams_results_retention_start",
              by = join_by(TEAM_naam, 
                           COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one") |>
    left_join_load("teams_results_year",
              by = join_by(TEAM_naam, 
                           COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one") |>
    left_join_load("teams_results_degree",
              by = join_by(TEAM_naam, 
                           COHORT_naam == SCHOOLJAAR_naam),
              relationship = "one-to-one") |>
    left_join_load("teams_students_satisfaction",
              by = join_by(TEAM_naam == OPLEIDING_team, 
                           COHORT_startjaar == JOB_SCHOOLJAAR_startjaar),
              relationship = "one-to-one",
              .config_data_path = "data_combined_dir") |>
    left_join_load("teams_employee_satisfaction",
              by = join_by(TEAM_kostenplaats_code, 
                           COHORT_startjaar == MWO_schooljaar_startjaar),
              relationship = "one-to-one",
              .config_data_path = "data_combined_dir")

save_combined(teams_combined)

```


We maken afgeleide variabelen van de teams data. Ook vervangen we eventuele infinite values voor NA-waardes.

```{r}

teams_combined_enriched <- teams_combined |>
    create_student_staff_ratio() |>
    create_student_growth_vars() |>
    fix_inf_values() |>
    filter(COHORT_startjaar >= config::get("first_year"))

save_combined(teams_combined_enriched)

```

