---
title: Inladen en voorbereiden
---

{{< include 00_project_setup.qmd >}}

Voordat we met de analyse beginnen, lade we eerst de data in. De functies hiervoor zijn te vinden in R/ingest.R.

Naast het inladen van de data, wordt ook data geprepareerd. Soms is dit een afgeleide variabele maken, maar het kan ook zijn dat de data wordt omgezet naar een ander detailniveau (bijvoorbeeld van een tabel met per regel een status, naar een tabel met per regel een verbintenis en kolommen met info per status). Deze functies zijn de vinden in R/prepare.R.

## Verbintenissen (enrollments)

We laden eerst alle data in die al op verbintenis-niveau is. Een aantal tabellen zijn niet op verbintenis-niveau en bevatten ook geen verbintenis ID. Denk hierbij aan BPV statussen en vooropleiding kenmerken van studenten.

Deze tabellen transformeren we naar student-jaar om het zo te kunnen koppelen aan verbintenis. Tenslotte zijn er nog een aantal mapping tables met extra informatie over een specifieke aspecten van een verbintenis.

```{r}

enrollments_basics <- ingest_enrollments_basics() |>
    #'*INFO* prepare derived variables regarding 'studiesucces' after combining data with programmes
    combine_enrollment_numbers_for_order()
enrollments_level <- ingest_enrollments_level() |>
    parse_enrollment_level()
enrollments_flex <- ingest_enrollments_flex() |>
    create_flex_boolean()
enrollments_special_needs <- ingest_enrollments_special_needs() |>
    summarise_special_needs() |>
    create_special_needs_boolean()
            
enrollments_study_advices <- ingest_study_advices() |>
    transform_advices_to_enrollments()
enrollments_application <- ingest_enrollments_application() |>
    calculate_application_duration()

print("Data op verbintenis niveau succesvol ingeladen en geprepareerd.")

```


```{r}

# BPV statusses transformed
bpv_registrations <- ingest_bpv_registrations()
bpv_statusses <- ingest_bpv_statusses()

enrollments_bpv <- bpv_statusses |>
    left_join(bpv_registrations,
              by = join_by(BPV_ID),
              relationship = "many-to-one") |>
    convert_bpv_status_types() |>
    transform_bpv_statusses_to_enrollments() 

print("BPV data succesvol ingeladen en getransformeerd naar verbintenis.")

```


```{r}
#' *INFO* An enrollment can be longer or shorter than one year
student_demographics_yearly <- ingest_students_demographics() |>
    transform_students_to_student_year()
student_prior_education_yearly <- ingest_students_prior_education() |>
    transform_prior_education_to_student_year() |>
    transform_prior_education_vo_and_highest_degree()

print("Demografie en vooropleiding succesvol ingeladen en getransformeerd naar verbintenis en student-schooljaar.")

```

### Aanvullende dimensies

We laden ook een aantal mapping tables in. Deze tabellen bevatten extra informatie over een specifiek aspect van een verbintenis. Denk hierbij aan redenen voor uitschrijving, cohorten, teams en locaties.

Teams en locaties zijn dus in de eerste plaats verbonden aan verbintenissen, niet aan opleidingen. Dit komt omdat een instellingen meerdere opleidingen op verschillende locaties kan hebben.

```{r}

reasons_for_leaving <- ingest_reasons_for_leaving() 
cohorts <- ingest_cohorts() |>
    add_cohort_start_year() |>
    add_cohort_start_date()

teams <- ingest_teams()
locations <- ingest_locations()

print("Aanvullende dimensies succesvol ingeladen en geprepareerd.")

```

### Opleidingen (programmes)

```{r}

programmes_exam_plan <- ingest_exam_plans() |> 
    summarise_plan_dates_to_programmes()
programmes_basics <- ingest_programmes_basics()
programme_bc_codes <- ingest_programme_bc_codes()

print("Programma (incl. examenplan) data succesvol ingeladen en geprepareerd.")

```

## Medewerkers (employees)

We laden eerst informatie uit medewerkers contracten in. Deze data is per jaar aangeleverd met peildatum 1 oktober. Naast de contracten, zijn er ook componenten met FTE aanpassingen.

```{r}

employees_contract <- bind_rows(
    ingest_employees_contract_basics_2023(),
    ingest_employees_contract_basics_2022(),
    ingest_employees_contract_basics_2021(),
    ingest_employees_contract_basics_2020(),
    ingest_employees_contract_basics_2019()
) |> 
    add_school_year() |>
    save_prepared_and_return(filename = "employees_contract")

employees_contract_extra_fte <- bind_rows(
    ingest_job_components_extra_fte_2023(),
    ingest_job_components_extra_fte_2022(),
    ingest_job_components_extra_fte_2021(),
    ingest_job_components_extra_fte_2020(),
    ingest_job_components_extra_fte_2019()
) |>
    summarise_components_to_employees()

print("Medewerker FTE data op peildatum succesvol ingeladen en geprepareerd.")


```

Tenslotte is er informatie over het verzuim van medewerkers. Deze zetten we om naar jaarlijkse
verzuimpercentages. Hierbij ontbreken gegeven van medewerkers die geen enkele verzuim melding in een jaar hebben. Dit vullen op na het koppelen.

```{r}

# Within map to keep the transformations separate by years, this makes it less memory intensive
employees_absence_yearly <- ingest_employee_absences() |>
    # Due to joins before the export there are duplicates
    distinct() |>
    # TODO rename function after fixing dates at ingest
    convert_absence_types() |>
    # TODO interne functies maken
    #split_absences_into_school_years() |>
    #map(expand_to_daily) |>
    #map(summarise_employee_absence_to_years) |>
    #map(summarise_employee_absence_to_weeks) |>
    #map(pivot_weeks_to_years) |>
    # TODO
    #map_dfr(bind_rows) |>
    summarise_employee_absence_to_years()
    #save_prepared_and_return(filename = "employees_absence")

print("Medewerker verzuim data succesvol ingeladen en getransformeerd naar schooljaar.")

```

```{r}

employees_job_type <-  bind_rows(
    ingest_employees_job_type_2023(),
    ingest_employees_job_type_2022(),
    ingest_employees_job_type_2021(),
    ingest_employees_job_type_2020(),
    ingest_employees_job_type_2019()
) |>
    # TODO some double values due to joins before export
    # This unfortunately also removes a few teachers who have double contracts
    distinct(
        MEDEWERKER_ID, 
        TEAM_kostenplaats_code, 
        MEDEWERKER_functie_peildatum, 
        .keep_all = TRUE
  ) |>
    save_prepared_and_return(filename = "employees_job_type")

print("Medewerker contract, fte, functie en verzuim data succesvol ingeladen en geprepareerd.")

```

## Waarnemingen / verzuim (attendance)

M.b.t. aanwezigheid zijn er waarnemingen. Deze worden gekoppeld aan groepsinschrijvingen van studenten. De waarnemeningen data is de grootste dataset dus dit inladen duurt even.

```{r}
#| freeze: true
#| cache: false

attendance_observations <- ingest_attendance_observations() 

enrollment_to_sk_mapping <- ingest_enrollment_to_sk_mapping()
group_placements <- ingest_group_placements()

group_placements_enriched <- group_placements |>
    # Enrollments absences only have SK_inschrijving that started over 2018, therefore this
    # inner join removes half of rows
    inner_join(enrollment_to_sk_mapping,
               by = join_by(SK_inschrijving),
               relationship = "many-to-one")

attendance_observations_enriched <- attendance_observations |>
    # I lose ~2400 enrollments
    # maybe these are students from before 2018, maybe some are filtered in data warehouse 
    inner_join(group_placements_enriched,
                by = join_by(SK_GroepInschrijving == SK_groep_inschrijving),
               relationship = "many-to-one")

## Remove for freeing up memory
rm(attendance_observations)

enrollment_years_attendance <- attendance_observations_enriched |>
    summarise_observations_to_yearly_attendance()

print("Waarnemingen data succesvol ingeladen en getransformeerd naar schooljaar.")

```

## Student tevredenheid (satisfaction)

We laden hier de JOB monitor in. In 2019 en 2021 waren er bijna dezelfde vragen, in 2023 waren er veel meer vragen (138 tov 85 en 78). Voor het correlatie-onderzoek kunnen we deze allemaal gebruiken, omdat missende waardes geen probleem zijn. 

De Job light heeft ook andere vragen en deze zijn ook anders geformateerd. Voor nu is ervoor gekozen dit niet in te laden.

```{r}

students_satisfaction <- bind_rows(
    ingest_students_satisfaction_2019(),
    ingest_students_satisfaction_2021(),
    ingest_students_satisfaction_2023()
) |>
    save_prepared_and_return(filename = "students_satisfaction")

print("Student tevredenheid data succesvol ingeladen en geprepareerd.")

```


## Medewerker tevredenheid (satisfaction)

Laad de medewerker tevredenheid data in. Deze data is per jaar aangeleverd met één antwoord per rij. Laad eerste de codeboeken in en koppel deze aan de antwoorden. Vervolgens worden de antwoorden omgezet naar een tabel met per medewerker één rij en alle gegeven antwoorden in de kolommen.

```{r}

employees_satisfaction_codebook_2020 <- ingest_employee_answers_satisfaction_codebook_2020()
employees_satisfaction_codebook_2022 <- ingest_employee_answers_satisfaction_codebook_2022()
employees_satisfaction_codebook_2024 <- ingest_employee_answers_satisfaction_codebook_2024()

employees_satisfaction_2020 <- ingest_employee_answers_satisfaction_2020() |>
    left_join(
        employees_satisfaction_codebook_2020,
        by = c("QuestionId" = "QuestionId", "Score" = "AnswerCode"),
        relationship = "many-to-one"
  ) |>
    pivot_answers_to_employees()

employees_satisfaction_2022 <- ingest_employee_answers_satisfaction_2022() |>
    left_join(
        employees_satisfaction_codebook_2022,
        by = c("QuestionId" = "QuestionId", "Score" = "AnswerCode"),
        relationship = "many-to-one"
    ) |> 
    pivot_answers_to_employees()

employees_satisfaction_2024 <- ingest_employee_answers_satisfaction_2024() |>
    left_join(
        employees_satisfaction_codebook_2024,
        by = c("QuestionId" = "QuestionId", "Score" = "AnswerCode"),
        relationship = "many-to-one"
    ) |> 
    pivot_answers_to_employees()

employees_satisfaction <- bind_rows(
    employees_satisfaction_2020, 
    employees_satisfaction_2022, 
    employees_satisfaction_2024
) |> 
    save_prepared_and_return(filename = "employees_satisfaction")

print("Medewerker tevredenheid data succesvol ingeladen en geprepareerd.")

```


## Startersresultaat (retention)

Voor nu is het startersresultaat. Dit zijn studenten die 1 jaar in de opleiding zitten. Zo kunnen we variabelen die pear jaar verschillen zoals medewerkerstevredenheid en studenttevredenheid hieraan koppelen.

```{r}

teams_results_retention_start <- ingest_teams_results_retention_start() |>
    format_school_year_name() |>
    parse_result_pct()

print("Startersresultaat succesvol ingeladen en geprepareerd.")

```
