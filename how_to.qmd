---
title: "How To"
author: "Corneel den Hartogh"
format: html
editor: visual
---

## How To

This guide walks you through setting up a project with `renv` for package management and `config` for environment configuration.

### 0. Initial Project Setup

#### 0.1. Initialize renv

We have ensured reproducability with renv. Renv keeps track of all the packages and versions and install these within the project. We have already done this for you and it should work the first time you open the project. The following code is a check and activates renv manually if it hasn't done automatically.

For more information about renv, see their [documentation](https://rstudio.github.io/renv/articles/renv.html).

```{r}
#| eval: false
if (!require("renv")) {
  install.packages("renv")
  renv::init()
} 
```

#### 0.2. Prepare project environment

In addition to renv there are some other things we need to set up. We have created a few functions to help you with this. The following code will load these functions.

```{r}

# This determines the packages for renv and restores renv if needed
source("utils/manage_packages.R")
devtools::load_all()
# Within utils/proj_settings/renviron.csv we have set system variables, this makes code more flexible and clean
# source("utils/set_system_variables.R")

#'*INFO* Temporary additional functions. These are functions that should be in supporting packages, but aren't yet.
# source("utils/read_and_write_functions.R")
# source("utils/mapping_functions.R")
# source("utils/other_functions.R")

#'*INFO* If you don't want to run this code block every time manually, you can the following line (without #) to .Rprofile in the main directory:
# source("utils/00_set_up_environment.R")
```

#### 0.3. Configure your own data

In order to make the scripts run for every institution, we use the config package to set specific settings. The only you have to is adapt the **config.yml** file in the main directory. You see the 'default' and the 'vu' settings. You can add your own institution. You only have to add configurations there are different from the default settings. It inherits other settings.

**Update the active config with your new config** (or run the code with the default, synthetic, settings)

For more information about config, see their [documentation](https://rstudio.github.io/config/).

```{r}
# TODO: Set new environment
Sys.setenv(R_CONFIG_ACTIVE = "default")

```

### 1. Ingest and prepare

#### 1.1 Everything related to enrollments

```{r}

enrollments_basic <- ingest_enrollments_basic() |>
    combine_enrollment_numbers_for_order()
enrollment_levels <- ingest_enrollment_levels() 
enrollment_flex_status <- ingest_enrollment_flex_status() |>
    create_flex_boolean()

study_advices <- ingest_study_advices |>
    transform_advices_to_enrollments()
reasons_for_leaving <- ingest_reasons_for_leaving() |>
    distinct()

# enrollment_absences <- ingest_enrollment_absences()
# group_participation <- ingest_group_participation()

applications <- ingest_applications() |>
    calculate_application_duration()

cohorts <- ingest_cohorts()




```

#### 1.2 Everything related to employees

```{r}

# job_contracts <- ingest_job_contracts()
# employee_absences <- ingest_employee_absences()

```

#### 1.3 Everything related to programmes and teams

```{r}

# TODO in opleiding zit geen team ID
programmes_basic <- ingest_programmes_basic()
# TODO still questions, see below
programme_bc_codes <- ingest_programme_bc_codes()
teams <- ingest_teams()

programmes_enriched <- programmes_basic |>
    left_join(programme_bc_codes, by = join_by(OPLEIDING_code),
              relationship = "one-to-one") |>
    left_join(teams, by = join_by(TEAM_ID), relationship = "many-to-one")

```

### 2. Combine

```{r}

enrollments_combined <- enrollments_basic |>
        left_join(enrollment_levels, by = join_by(VERBINTENIS_ID), relationship = "many-to-one") |>
        left_join(enrollment_flex_status, by = join_by(VERBINTENIS_ID), relationship = "many-to-one") |>
        left_join(applications, by = join_by(VERBINTENIS_ID), relationship = "many-to-one") |>
        left_join(programmes_basic, by = join_by(OPLEIDING_ID), relationship = "many-to-one") |>
        left_join(cohorts, by = join_by(COHORT_ID), relationship = "many-to-one") |>
        left_join(teams, by = join_by(TEAM_ID), relationship = "many-to-one")

```

### 4. Controle

```{r}

# Ga ik per cohort of niet?
# Zou aanmelding per verbintenis of verbintenisblad moeten zijn?
# sum(is.na(data$AANMELDING_begin_datum))
# [1] 18362
# ## Is flex per verbintenis of per cohort?
# > sum(is.na(data$VERBINTENIS_is_flex))
# [1] 121
# > sum(is.na(data$VERBINTENIS_niveau))
# [1] 12


enrollments_nieuw_zonder_aanmeldingsdatum <- enrollments_combined |> 
    filter(is.na(AANMELDING_begin_datum)) |>
    count(VERBINTENIS_volgnummer, VERBINTENIS_bladnummer)
# ~300

programme_bc_codes_differences <- programme_bc_codes %>% count(Niveau, NiveauBeroep)
# soms niveau beroep niet van toepassing
# soms niveau beroep anders dan niveau
    

# waarnemingen, waarop koppelen? # Kan verbintenis worden toegevoegd?
# groepsdeelname, waarop koppelen? # Kan verbintenis worden toegevoegd?

# medewerker fte's, heeft geen functie ID en geen arb ID, waarop kan ik dit het beste koppelen aan verzuim medewerkers? 
## lijkt ook recente jaren data te ontbreken, misschien door gemaakte koppelingen?


# als we het per jaar doen, dan is medewerker-jaar-kostenplaats misschien genoeg? of hebben medewerkers meerdere functies?
# medewerkers ftes
job_contracts |> tabyl(CONTRACT_afwijking_kostenplaats) %>% arrange(desc(n)) %>% slice_head(n = 1)




# Redenuitschrijving
## TODO Hier zit OVERLIJDEN in en ACTIEF, die kunnen eruit

```

